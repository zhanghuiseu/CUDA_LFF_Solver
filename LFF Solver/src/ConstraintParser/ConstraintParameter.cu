	/*
	 * ConstraintParameter.cu
	 * 
	 * ***************   Notice   ***************
	 * Auto Generated By ATPC on:2017-12-02 17:30:17
	 * Author: ZhangHui
	 * 
	 */ 

	#include <iostream>

	#include "./../solver/type.h"
	#include "./../solver/ConstantValue.h"
	#include "./../model/RuntimeValue.h"
	#include "ConstraintParameter.cuh"

	using namespace std;


	/*
	 * 约束的名字信息
	 * */ 
	string ConstraintParameter::constraintName = "benchmark83";

	/*
	 * 约束的变量类型，使用bool变量表示，1表示浮点数，0表示整形
	 * */ 
	bool ConstraintParameter::constraintVarType[NUM_OF_PARAM] = { 1 , 1 };

	/*
	 * 变量的名字信息
	 * */ 
	string ConstraintParameter::constraintVarName[NUM_OF_PARAM] = { "a" , "b" };

	/*
	 * 变量的整体依赖关系，使用bool变量表示，1表示相关，0表示不相关
	 * */ 
	bool ConstraintParameter::constraintDependencyRela[NUM_OF_PARAM] = { true , true };

	/*
	 * 所有的约束的比较运算符的类型信息
	 * 1 表示> , >= , < , <=四种情况
	 * 0 表示 == 情况
	 * -1 表示 ！= 情况
	 * */ 
	int ConstraintParameter::constraintCompType[Num_Of_Constraints] =  { 0 };

	/*
	 * 这个函数是用来获取约束的信息
	 * */ 
	vector< vector<string> > ConstraintParameter::getConstraintInfo()
	{
		vector< vector<string> > res;

		vector<string> HeQv1;
		HeQv1.push_back("powf((1-a),2.0)+100*(powf((b-a*a),2))==0");

		res.push_back(HeQv1);

		return res;
	}

	/*
	 * 这个函数是用来获取约束的运行时刻值，用于CPU验证
	 * */ 
	vector< vector<RuntimeValue*> > ConstraintParameter::getCoveredInfo(FloatType* nums)
	{
		vector< vector<RuntimeValue*> > res;

		vector<RuntimeValue*> HeQv1;

		RuntimeValue* tmp_0_0 = getConstraintValue_0_0(nums[0] , nums[1]);
		HeQv1.push_back(tmp_0_0);

		res.push_back(HeQv1);

		return res;
	}

	/*
	 * 下面是最后在CPU对求出的可行解向量做验证的函数，
	 * 主要就是计算每一个简单子约束的运行时刻值，以及每一个简单自约束的满足情况
	 * */ 
	RuntimeValue* ConstraintParameter::getConstraintValue_0_0( FloatType a , FloatType b )
	{
		FloatType value = ( powf((1-a),2.0)+100*(powf((b-a*a),2)) ) - ( 0 );
		bool isCovered = (powf((1-a),2.0)+100*(powf((b-a*a),2))==0) * true;
		RuntimeValue* one = new RuntimeValue(value,isCovered);
		return one;
	}


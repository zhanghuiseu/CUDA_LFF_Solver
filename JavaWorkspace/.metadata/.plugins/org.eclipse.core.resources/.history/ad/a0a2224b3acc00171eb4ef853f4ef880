package cn.nju.seg.atpc.parser;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.List;

import org.eclipse.cdt.core.dom.ast.IASTExpression;
import org.eclipse.cdt.core.dom.ast.IASTTranslationUnit;

import cn.nju.seg.atpc.main.ConstraintParameter;
import cn.nju.seg.atpc.model.BinaryExpression;
import cn.nju.seg.atpc.model.BinaryExpressionUtil;
import cn.nju.seg.atpc.model.Constraint;
import cn.nju.seg.atpc.model.Expression;

public class BinaryExpressionParse 
{	
	public static BinaryExpression targetBinaryExpression=null;
	public static Constraint targetConstraint=null;
	
	public BinaryExpressionParse() 
	{
		// TODO Auto-generated constructor stub
	}
    /**
	 * 带求解约束的输入
	 * @param BinaryExpression
	 */
	public static void setBinartExpression(String binaryExpression,String nodeName) 
	{
		String AbsolutePath=new File("").getAbsolutePath().toString();
		String filePath=AbsolutePath+"/binaryExpression.c";
		System.out.println(filePath);
		//建立待处理约束的AST树
		try {
			File beFile=new File(filePath);
			if(!beFile.exists())
			{
				beFile.createNewFile();
			}
			
			FileOutputStream outFile=new FileOutputStream(beFile);
			BufferedWriter writeFile=new BufferedWriter(new OutputStreamWriter(outFile));
			
			StringBuilder code=new StringBuilder();
			code.append("int main(){if(" + binaryExpression + "){}}");
			writeFile.write(code.toString());
			writeFile.flush();
			writeFile.close();
		}catch (FileNotFoundException e) 
		{
			// TODO Auto-generated catch block
			System.err.println("Input Source Code has problems!");
			e.printStackTrace();
		} catch (IOException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		IASTBinaryExprssionVisitor expressionVisitor=new IASTBinaryExprssionVisitor();
		CDTAstUtil ast=new CDTAstUtil(filePath);
		IASTTranslationUnit astUnit=ast.getIASTTranslationUnit();
		
		System.out.println("AST Parse Bgein： ");
		astUnit.accept(expressionVisitor);
		System.out.println("AST Parse End!!\n");
		
		IASTExpression iabe=expressionVisitor.getIabe();
		BinaryExpressionParse.targetBinaryExpression = BinaryExpressionUtil.translateExpr2(iabe);
		
		System.out.println("The Input Expression is :"+binaryExpression);
		System.out.println("The Final Binary Expression Without '!' is: "+BinaryExpressionParse.targetBinaryExpression.toString()+"\n\n");	
		
		BinaryExpressionParse.targetConstraint=new Constraint((Expression)targetBinaryExpression);
		
		BinaryExpressionParse.targetConstraint.printConstraint();
	}
	
    /**
	 * 待处理约束的类型
	 * @param typeString
	 */
	public static void setParameterTypes(String typeString)
	{
		ConstraintParameter.parameterTypes=typeString.replace(" ","").split(",");
		ConstraintParameter.NumOFParam = ConstraintParameter.parameterTypes.length;
		BinaryExpressionParse.setParameters();
	}
	
	/**
	 * 获取输入变量的类型（仅区分int与double)
	 */
	public static void setParameters()
	{
		for (int i=0; i<ConstraintParameter.NumOFParam; i++)
		{
			if (ConstraintParameter.parameterTypes[i].equals("int"))
			{
				ConstraintParameter.parameterTypes[i] = "int";
			}
			else if (ConstraintParameter.parameterTypes[i].equals("const int"))
			{
				ConstraintParameter.parameterTypes[i] = "int";
			}
			else if (ConstraintParameter.parameterTypes[i].equals("int&"))
			{
				ConstraintParameter.parameterTypes[i] = "int";
			}
			else if (ConstraintParameter.parameterTypes[i].equals("long"))
			{
				ConstraintParameter.parameterTypes[i] = "int";
			}
			else if (ConstraintParameter.parameterTypes[i].equals("double"))
			{
				ConstraintParameter.parameterTypes[i] = "double";
			}
			else if (ConstraintParameter.parameterTypes[i].equals("float"))
			{
				ConstraintParameter.parameterTypes[i] = "double";
			}
			else if (ConstraintParameter.parameterTypes[i].equals("short"))
			{
				ConstraintParameter.parameterTypes[i] = "int";
			}
			else if (ConstraintParameter.parameterTypes[i].equals("unsigned short"))
			{
				ConstraintParameter.parameterTypes[i] = "int";
			}
			else if (ConstraintParameter.parameterTypes[i].equals("unsigned long"))
			{
				ConstraintParameter.parameterTypes[i] = "int";
			}
			else 
			{
				ConstraintParameter.parameterTypes[i] = "double";
			}
		}
	}
	
    /**
	 * 待处理约束的变量名
	 * @param nameString
	 */
	public static void setParameterNames(String nameString)
	{
		ConstraintParameter.parameterNames = nameString.replace(" ","").split(",");
		if(ConstraintParameter.NumOFParam != ConstraintParameter.parameterNames.length)
			System.out.println("约束输入有问题");
	}
	
    /**
	 * 待处理约束的依赖关系
	 * 主要就是通过字符串查找的方式来判断搜索变量和约束的依赖关系
	 * @param nameString
	 */
	public static void setDependencyRele(String binaryExpression)
	{
		ConstraintParameter.DependencyRele = new boolean[ConstraintParameter.NumOFParam];
		for(int i=0;i<ConstraintParameter.NumOFParam;i++)
		{
			boolean dep = binaryExpression.contains(ConstraintParameter.parameterNames[i]);
			if(dep == true)
				ConstraintParameter.DependencyRele[i] = true;
			else
				ConstraintParameter.DependencyRele[i] = false;
		}
	}
	
    /**
	 * 设置约束的名字，这个是用来区分不同的约束的一个名字
	 * @param nameString
	 */
	public static void setConstraintName(String nodeName)
	{
		ConstraintParameter.constraintName = nodeName;
	}
	
    /**
	 * 第三方使用者初始化入口
	 * @param nameString
	 */
	public static void initAll(String binaryExpression,String nodeName,String typeString,String nameString,String initNum) 
	{
		BinaryExpressionParse.setBinartExpression(binaryExpression,nodeName);
		
		BinaryExpressionParse.setParameterTypes(typeString);
		BinaryExpressionParse.setParameterNames(nameString);
		BinaryExpressionParse.setDependencyRele(binaryExpression);
		BinaryExpressionParse.setConstraintName(nameString);
		
		ConstraintParameter.needCustomizedParams = true;
		if(initNum.equals("")==false)
		{
			String[] numStr = initNum.split(",");
			ConstraintParameter.CustomizedParams = new double[numStr.length];
			for(int i=0;i<numStr.length;i++)
			{
				ConstraintParameter.CustomizedParams[i] = Double.parseDouble(numStr[i]);
			}
		}
	}
	
    /**
	 * 第三方使用者初始化入口
	 * @param nameString
	 */
	public static void initAll(String binaryExpression,String nodeName,String typeString,String nameString) 
	{
		BinaryExpressionParse.setBinartExpression(binaryExpression,nodeName);
		
		BinaryExpressionParse.setParameterTypes(typeString);
		BinaryExpressionParse.setParameterNames(nameString);
		BinaryExpressionParse.setDependencyRele(binaryExpression);
		BinaryExpressionParse.setConstraintName(nameString);
		ConstraintParameter.needCustomizedParams = false;
	}
	
	public static void beginAutoGenerateParallelCode()
	{
		
	}
}

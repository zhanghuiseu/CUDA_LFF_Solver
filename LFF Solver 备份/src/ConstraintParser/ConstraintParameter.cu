	/*
	 * ConstraintParameter.cu
	 * 
	 * ***************   Notice   ***************
	 * Auto Generated By ATPC on:2017-11-21 15:55:06
	 * Author: ZhangHui
	 * 
	 */ 

	#include <iostream>

	#include "./../solver/ConstantValue.h"
	#include "./../model/RuntimeValue.h"
	#include "ConstraintParameter.cuh"

	using namespace std;


	/*
	 * 约束的名字信息
	 * */ 
	string ConstraintParameter::constraintName = "CUDA Test Benchmark27";

	/*
	 * 约束的变量类型，使用bool变量表示，1表示浮点数，0表示整形
	 * */ 
	bool ConstraintParameter::constraintVarType[NUM_OF_PARAM] = { 1 , 1 , 1 , 1 , 1 };

	/*
	 * 变量的名字信息
	 * */ 
	string ConstraintParameter::constraintVarName[NUM_OF_PARAM] = { "x" , "y" , "z" , "w" , "v" };

	/*
	 * 变量的整体依赖关系，使用bool变量表示，1表示相关，0表示不相关
	 * */ 
	bool ConstraintParameter::constraintDependencyRela[NUM_OF_PARAM] = { true , true , true , true , true };

	/*
	 * 所有的约束的比较运算符的类型信息
	 * 1 表示> , >= , < , <=四种情况
	 * 0 表示 == 情况
	 * -1 表示 ！= 情况
	 * */ 
	int ConstraintParameter::constraintCompType[Num_Of_Constraints] =  { 1 , 1 , 1 , 1 };

	/*
	 * 这个函数是用来获取约束的信息
	 * */ 
	vector< vector<string> > ConstraintParameter::getConstraintInfo()
	{
		vector< vector<string> > res;

		vector<string> HeQv1;
		HeQv1.push_back("cos(sin(x*z))>sin(cos(x*y))");
		HeQv1.push_back("sin(x*y*z*w)>0");
		HeQv1.push_back("0>cos(x*y*z*w)");
		HeQv1.push_back("sin(2*w-y)/(cos(2*y+v)+1)>cos(2*z+x)/(sin(2*w+v)-1)");

		res.push_back(HeQv1);

		return res;
	}

	/*
	 * 这个函数是用来获取约束的运行时刻值，用于CPU验证
	 * */ 
	vector< vector<RuntimeValue*> > ConstraintParameter::getCoveredInfo(double* nums)
	{
		vector< vector<RuntimeValue*> > res;

		vector<RuntimeValue*> HeQv1;

		RuntimeValue* tmp_0_0 = getConstraintValue_0_0(nums[0] , nums[1] , nums[2] , nums[3] , nums[4]);
		HeQv1.push_back(tmp_0_0);
		RuntimeValue* tmp_0_1 = getConstraintValue_0_1(nums[0] , nums[1] , nums[2] , nums[3] , nums[4]);
		HeQv1.push_back(tmp_0_1);
		RuntimeValue* tmp_0_2 = getConstraintValue_0_2(nums[0] , nums[1] , nums[2] , nums[3] , nums[4]);
		HeQv1.push_back(tmp_0_2);
		RuntimeValue* tmp_0_3 = getConstraintValue_0_3(nums[0] , nums[1] , nums[2] , nums[3] , nums[4]);
		HeQv1.push_back(tmp_0_3);

		res.push_back(HeQv1);

		return res;
	}

	/*
	 * 下面是最后在CPU对求出的可行解向量做验证的函数，
	 * 主要就是计算每一个简单子约束的运行时刻值，以及每一个简单自约束的满足情况
	 * */ 
	RuntimeValue* ConstraintParameter::getConstraintValue_0_0( double x , double y , double z , double w , double v )
	{
		double value = ( cos(sin(x*z)) ) - ( sin(cos(x*y)) );
		bool isCovered = (cos(sin(x*z))>sin(cos(x*y))) * true;
		RuntimeValue* one = new RuntimeValue(value,isCovered);
		return one;
	}

	RuntimeValue* ConstraintParameter::getConstraintValue_0_1( double x , double y , double z , double w , double v )
	{
		double value = ( sin(x*y*z*w) ) - ( 0 );
		bool isCovered = (sin(x*y*z*w)>0) * true;
		RuntimeValue* one = new RuntimeValue(value,isCovered);
		return one;
	}

	RuntimeValue* ConstraintParameter::getConstraintValue_0_2( double x , double y , double z , double w , double v )
	{
		double value = ( 0 ) - ( cos(x*y*z*w) );
		bool isCovered = (0>cos(x*y*z*w)) * true;
		RuntimeValue* one = new RuntimeValue(value,isCovered);
		return one;
	}

	RuntimeValue* ConstraintParameter::getConstraintValue_0_3( double x , double y , double z , double w , double v )
	{
		double value = ( sin(2*w-y)/(cos(2*y+v)+1) ) - ( cos(2*z+x)/(sin(2*w+v)-1) );
		bool isCovered = (sin(2*w-y)/(cos(2*y+v)+1)>cos(2*z+x)/(sin(2*w+v)-1)) * true;
		RuntimeValue* one = new RuntimeValue(value,isCovered);
		return one;
	}


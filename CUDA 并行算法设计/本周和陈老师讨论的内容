
先从简单自约束比较运算符来分析，主要分为三类，然后针对每一种情况分析线性拟合情况
1） > , >= , < , <=  
    这个主要分为三种情况
    1.1）斜率为0：全区间
                ：无解
    1.2）斜率补位0：全区间
                   半区间：零点在左边
                         ：零点在右边
                   无解：零点在左边
                       ：零点在右边

2）== ZY的是返回当前Double表示的区间

3）!= 直接返回当前区间，

我目前的想法是遇到==、!=和斜率为0的情况下，返回全区间

case：0
等号和不等号 全区间
判断是否是> 和 >=比较运算符号的处理
斜率为0： abs(y1-y2)<=doubleMin && y1 >=0 && y2>=0 全区间
斜率存在： abs(y1-y2)>doubleMin && y1>=0 && y2>=0 全区间
	 
case1: abs(y1-y2)<=doubleMin && y1 <0 && y2<0        无解
case2: abs(y1-y2)>doubleMin && z>x1 && z<x2 && y1>0 (x1,z)
case3: abs(y1-y2)>doubleMin && z>x1 && z<x2 && y2>0 (z,x2)
case4: abs(y1-y2)>doubleMin && z<x1 && y1 <0 && y2<0 无解(xbefore,d)
case5: abs(y1-y2)>doubleMin && z>x2 && y1 <0 && y2<0 无解(d,xafter)


部分实验结果，根据区间扩展和区间细化预测的解的数量很少，目前窗口长度是1024，
区间扩展的范围还没有设计的窗口长度的范围大，
所以在某些例子可能出现经过一轮计算过后的预测解只有几十个的样子，这样也会造成硬件资源的浪费，所以我还认为可以针对窗口作进一步的扩展，可以通过预测节点的数量动态的调整窗口的长度的扩展

在最前面的若干次拟合的时候，预测点的增长量很低（这种情况），那么应该对窗口进一步的扩展

我也确认过ZY的工具以及LFF Solver，都是这种情况


执行计算效率：目前是依次并行计算，我尝试了一下同事启动多个核函数并行计算多个不同的任务，速度明显加快，目前编程阶段暂时考虑依次并行，等完成全部工资，我在把循环展开部分等等多个不同任务并行化


检查显存泄露，提高硬件资源利用率




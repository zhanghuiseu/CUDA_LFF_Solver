	/*
	 * CLF.cuh
	 *
	 *  Created on: Nov 8, 2017
	 *      Author: zy
	 */

	#ifndef CLF_CUH_
	#define CLF_CUH_

	#include "./../ConstraintParser/ConstraintParameter.cuh"
	#include "./../model/CoodinateDouble.cuh"
	#include "./../model/IntervalDouble.cuh"
	#include "./../model/PriorityDouble.cuh"
	#include "./../model/FullCoveredInfo.cuh"
    #include "./../solver/ATG.h"
	#include "./../solver/PCATG.h"
	#include "./../solver/ConstantValue.h"
	#include "./../ErrorHandle/ErrorHandle.cuh"

	#include "cuda_runtime.h"
	#include "device_launch_parameters.h"
	#include "ExcuteConstraint.cuh"
	#include "./../ConstraintParser/ConstraintParameter.cuh"


	#include <iostream>
	#include <climits>

	using namespace std;

	static const int DoubleMin = numeric_limits<double>::min();
	static const int DoubleMax = numeric_limits<double>::();

	/*
	 *  所有的约束的比较运算符的类型信息
	 *  1 表示> , >= , < , <=四种情况
	 *  0 表示 == 情况
	 * -1 表示 ！= 情况
	 * */

	/*
	 * 等式约束的处理
	 * */
	__device__ bool equal(CoodinateDouble* a,CoodinateDouble* b,const int cmpType);

	/*
	 * 不等式约束的处理
	 * */
	__device__ bool notEqual(CoodinateDouble* a,CoodinateDouble* b,const int cmpType);

	/*
	 * 大于等于号约束的case0的处理
	 * */
	__device__ bool greatForCase0(CoodinateDouble* a,CoodinateDouble* b,const int cmpType);

	/*
	 * 大于等于号约束的case2的处理
	 * */
	__device__ bool greatForCase2(CoodinateDouble* a,CoodinateDouble* b,const int cmpType);

	/*
	 * 大于等于号约束的case3的处理
	 * */
	__device__ bool greatForCase3(CoodinateDouble* a,CoodinateDouble* b,const int cmpType);

	/*
	 * 大于等于号约束的case4的处理
	 * */
	__device__ bool greatForCase4(CoodinateDouble* a,CoodinateDouble* b,const int cmpType);

	/*
	 * 大于等于号约束的case5的处理
	 * */
	__device__ bool greatForCase5(CoodinateDouble* a,CoodinateDouble* b,const int cmpType);

	/*
	 *  case：0
	 *  等号和不等号 全区间
	 *  判断是否是> 和 >=比较运算符号的处理
	 *  斜率为0： abs(y1-y2)<=doubleMin && y1 >=0 && y2>=0 全区间
	 *  斜率存在： abs(y1-y2)>doubleMin && y1>=0 && y2>=0 全区间
	 *  case1: abs(y1-y2)<=doubleMin && y1 <0 && y2<0        无解
	 *  case2: abs(y1-y2)>doubleMin && z>x1 && z<x2 && y1>0 (x1,z)
	 *  case3: abs(y1-y2)>doubleMin && z>x1 && z<x2 && y2>0 (z,x2)
	 *  case4: abs(y1-y2)>doubleMin && z<x1 && y1 <0 && y2<0 无解(xbefore,d)
	 *  case5: abs(y1-y2)>doubleMin && z>x2 && y1 <0 && y2<0 无解(d,xafter)
	 *  下面是所有的分类的变量的设置
	 * */
	__device__ bool case0(CoodinateDouble* a,CoodinateDouble* b,const int cmpType);
	__device__ bool case1(CoodinateDouble* a,CoodinateDouble* b,const int cmpType);
	__device__ bool case2(CoodinateDouble* a,CoodinateDouble* b,const int cmpType);
	__device__ bool case3(CoodinateDouble* a,CoodinateDouble* b,const int cmpType);
	__device__ bool case4(CoodinateDouble* a,CoodinateDouble* b,const int cmpType);
	__device__ bool case5(CoodinateDouble* a,CoodinateDouble* b,const int cmpType);



	#endif /* CLF_CUH_ */

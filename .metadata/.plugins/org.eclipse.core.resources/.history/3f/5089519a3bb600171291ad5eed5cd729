/*
 * ATG.cpp
 *
 *  Created on: Oct 14, 2017
 *      Author: zy
 */


#include <iostream>
#include <string>

#include "ATG.h"
#include "PCATG.h"
#include "SolverParameter.h"
#include "./../ConstraintParser/ConstraintParameter.cuh"

using namespace std;


	/*
	 *  下面是使用到的ATG类的static的初始化部分参数
	 * */

	/**
	 * 当前搜素变量的下标
	 */
	int ATG::currentSearchParamIndex = 0;

	/**
	 * 存储每一轮的种子搜索点(对每一个变量的搜索都可得到下一轮的种子搜索点）
	 */
	SearchTask* ATG::seeds = NULL;
	SearchTask* ATG::nextSeeds = NULL;

	/**
	 * 存储第一轮中以随机值开始搜索的每一个变量方向上最优点的覆盖节点数
	 */
	int ATG::NumOfCoveredNodes[ConstraintParameter::NUM_OF_PARAM] ={0};

	/**
	 * 当前输入向量
	 */
	double ATG::parameters[ConstraintParameter::NUM_OF_PARAM] ={0};


	/*
	 * 策略的设置函数
	 * */
	void ATG::setStrategy()
	{
		SolverParameter::MAX_NUM_OF_PREDICT_PARAM = 10;
		SolverParameter::MAX_NUM_OF_GENERATE_CYCLE = ConstraintParameter::NUM_OF_PARAM;
	}

	/*
	 * LFF Solver 测试用例生成
	 * 这个函数主要是多变量和单变量策略调度模块
	 * */
	int ATG::generateTestDataForSolver()
	{
		this->setStrategy();

		this->pcatg.generateTestDataForSolver();

		return 1;
	}

	/*
	 * 这个函数函数是多变量交叉搜索的实现
	 * */
	int ATG::generateTestDataForSolverByAll()
	{

	}

	/*
	 * 这个函数是单变量一次搜索的实现
	 * */
	int generateTestDataForSolverByOneByOne();



	/*
	 * runLFFSolver.cpp
	 *
	 *  Created on: Oct 14, 2017
	 *      Author: zy
	 */

	#include <iostream>
	#include <fstream>
	#include <string>
	#include <ctime>
	#include <time.h>

	#include "runLFFSolver.h"
	#include "SolverParameter.h"
	#include "ATG.h"
	#include "./../ConstraintParser/ConstraintParameter.cuh"
	#include "./../model/MathFunction.h"
	#include "./../model/RuntimeValue.h"
	#include "./../ErrorHandle/ErrorHandle.cuh"

	#include "cuda_runtime.h"
	#include "device_launch_parameters.h"

	using namespace std;

	/*
	 * LFF Solver 的总的开始部分
	 * */
	void runLFFSolver::run()
	{
		//选择当前的显卡
		cudaError_t cudaStatus = cudaSetDevice(0);
		ErrorHandle::dealError(cudaStatus,"cudaError_t cudaStatus = cudaSetDevice(0);");

		//给随机生成数设定seed
		srand(time(0));

		//为最终的解向量申请空间
		SolverParameter::finalParams = new double[ConstraintParameter::NUM_OF_PARAM];

		//设置ATG开始得了类，ATG中是并行搜索任务的调度类
		ATG atg = ATG();

		//设置计数变量
		clock_t start,finish;

		//记录所有实验数据的字符串
		string resultInfo = "";

		//记录每一次的实验信息以及约束信息
		string constraintInfo = MathFunction::toString(ConstraintParameter::getConstraintInfo());

		resultInfo += "**************** The Constraints Is As Following ****************\n";
		resultInfo += constraintInfo + "\n\n";

		/*
		 * 下面是搜索策略以及实验参数的设置
		 * */
		/*SolverParameter::MAX_NUM_OF_PREDICT_PARAM = 1357;
		SolverParameter::MAX_NUM_OF_GENERATE_CYCLE = ConstraintParameter::NUM_OF_PARAM;*/


		for(int indexOfRun = 1 ; indexOfRun <= SolverParameter::countOfRepeation; indexOfRun++)
		{
			string resultOne = "";
			//参数重置
			SolverParameter::reset();
			//获取当前的时间
			ATG::currentSearchParamPriotity = 0;
			start = clock();
			bool isCovered = atg.generateTestDataForSolver();
			finish = clock();

			/*解
			 * 下面是一次计算结束之后结果输出
			 * 并打印测试记录
			 * */
			double totalTime = (double)(finish - start) / CLOCKS_PER_SEC;
			double algorTime = (double)(finish - start - SolverParameter::function_time) / CLOCKS_PER_SEC;

			/*
			 * 下面是记录相关参数
			 * */
			SolverParameter::totalTime[indexOfRun-1] = totalTime ;
			SolverParameter::algorithmTime[indexOfRun-1] =  algorTime;
			SolverParameter::totalFrequency[indexOfRun-1] = SolverParameter::function_frequency;
			SolverParameter::findResult[indexOfRun-1] = isCovered;

			string indexStr = MathFunction::toString(indexOfRun-1);
			resultOne += "----------------------------run" + indexStr + "----------------------------\n";
			resultOne += "Coverage Result Is As Following:\n";

			if(isCovered)
			{
				resultOne += "Yes!!!!!   Find Covered Input: " + MathFunction::toString(SolverParameter::finalParams,ConstraintParameter::NUM_OF_PARAM) + "\n";
				resultOne += "Best Covered is: " + MathFunction::toString(SolverParameter::finalCovered * 100) + "%\n";
			}else
			{
				resultOne += "Sorry,No!!!!! Cannot Find Covered Input ！\n";
				resultOne += "The Best Input Is: " + MathFunction::toString(SolverParameter::finalParams,ConstraintParameter::NUM_OF_PARAM) + "\n";
				resultOne += "Best Covered is: " + MathFunction::toString(SolverParameter::finalCovered * 100) + "%\n";
			}

			//获取当前解向量的运行时刻值，便于分析和验证
			vector< vector<RuntimeValue*> > verificationVec = ConstraintParameter::getCoveredInfo(SolverParameter::finalParams);
			//获取对应的文本字符串
			string runtimeValueInfo = getRuntimeValueInfo(verificationVec);
			//针对获取的运行时刻值做析构处理
			makeClean(verificationVec);

			resultOne += "\n" + runtimeValueInfo + "\n";
			resultOne += "SolverParameter::totalTime[" + indexStr + "] = " + MathFunction::toString(totalTime) + "\n";
			resultOne += "SolverParameter::algorithmTime[" + indexStr + "] = " + MathFunction::toString(algorTime) + "\n";
			resultOne += "SolverParameter::FunctionTime[" + indexStr + "] = " + MathFunction::toString(totalTime-algorTime) + "\n";
			resultOne += "SolverParameter::totalFrequency[" + indexStr + "] = " + MathFunction::toString(SolverParameter::function_frequency) + "\n";


			//打印一次实验的结果
			runLFFSolver::printOneResult(resultOne,indexOfRun);
			resultInfo += resultOne + "\n";

			cout<<resultOne<<endl<<endl;

		}

		//打印所有的结果
		runLFFSolver::printTotalResult(resultInfo);

		/*
		 * 最后的析构部分，这个千万不要忘记了
		 * */
		delete SolverParameter::finalParams;
	}

	/*
	 * LFF Solver打印一次实验的结果
	 * */
	void runLFFSolver::printOneResult(string resultOne , int index)
	{
		ofstream out;
		string filePath = "./TempResult/" + ConstraintParameter::constraintName + "__"
					   + MathFunction::toString(index)+ ".result";
		out.open(filePath.c_str());
		out<<resultOne<<endl;
		out.close();
	}


	/*
	 * LFF Solver 打印所有实验的结果，包括各种参数的均值、最大、最小值等等
	 * */
	void runLFFSolver::printTotalResult(string resultInfo)
	{
		resultInfo += "----------------------------statistical result----------------------------\n";
		double averageTime = MathFunction::getAverage(SolverParameter::totalTime,SolverParameter::countOfRepeation);
		resultInfo += "Average Time:\t" + MathFunction::toString(averageTime) + "\n";
		double bestTime = MathFunction::getMin(SolverParameter::totalTime,SolverParameter::countOfRepeation);
		resultInfo += "Best Time:\t" + MathFunction::toString(bestTime) + "\n";
		double worstTime = MathFunction::getMax(SolverParameter::totalTime,SolverParameter::countOfRepeation);
		resultInfo += "Worst Time:\t" + MathFunction::toString(worstTime) + "\n";

		double frequency = MathFunction::getAverage(SolverParameter::totalFrequency,SolverParameter::countOfRepeation);
		resultInfo += "Average Frequency:\t" + MathFunction::toString(frequency) + "\n";
		resultInfo += "Coverage Result:\t" + MathFunction::toString(SolverParameter::findResult,SolverParameter::countOfRepeation) + "\n";

		resultInfo += "Parameter Setting: \n";
		resultInfo += "MAX_NUM_OF_PREDICT_PARAM = "+ MathFunction::toString(SolverParameter::MAX_NUM_OF_PREDICT_PARAM) + "\n";
		resultInfo += "MAX_NUM_OF_GENERATE_CYCLE = "+ MathFunction::toString(SolverParameter::MAX_NUM_OF_GENERATE_CYCLE ) + "\n";;
		resultInfo += "PREDICT_BOUNDARY = "+ MathFunction::toString(SolverParameter::PREDICT_BOUNDARY) + "\n";;

		string strategy = SolverParameter::SEARCH_STRATEGY == 0 ? "SEARCH_STRATEGY_ALL" : "SEARCH_STRATEGY_ONE_BY_ONE \n";;
		resultInfo += "Search Strategy: " + strategy + "\n";

		ofstream out;
		string filePath = "./FinalResult/" + ConstraintParameter::constraintName + ".result";
		out.open(filePath.c_str());
		out<<resultInfo<<endl;
		out.close();
	}

	/*
	 * 获取runtime value的运行时刻值的信息
	 * */
	string runLFFSolver::getRuntimeValueInfo(vector< vector<RuntimeValue*> > verificationVec)
	{
		string res = "析取范式以及运行结果如下： \n";

		vector< vector<string> > constraints = ConstraintParameter::getConstraintInfo();
		for(int i=0;i<constraints.size();i++)
		{
			string one = "析取范式的合取子式 " + MathFunction::toString(i) + " : \n";
			for(int j=0;j<constraints[i].size();j++)
			{
				one += constraints[i][j] + "  RuntimeValue:  " + MathFunction::toString(verificationVec[i][j]->value)
					   + "  isCovered： " + MathFunction::toString(verificationVec[i][j]->isCovered) + "\n";
			}
			res += one;
		}
		return res;
	}

	/*
	 * 部分使用图动态申请内存的析构出处理
	 * 把之前获取的运行时刻值的信息处理掉
	 * */
	bool runLFFSolver::makeClean(vector< vector<RuntimeValue*> > verificationVec)
	{
		for(int i = 0; i < verificationVec.size(); i++)
		{
			for(int j = 0; j < verificationVec[i].size(); j++)
			{
				delete verificationVec[i][j];
			}
		}
		return true;
	}


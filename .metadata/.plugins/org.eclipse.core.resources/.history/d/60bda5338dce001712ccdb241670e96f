	/*
	 * ExcuteConstraint.cu
	 * 
	 * ***************   Notice   ***************
	 * Auto Generated By ATPC on:2017-11-21 15:16:25
	 * Author: ZhangHui
	 * 
	 */ 

	#include <iostream>

	#include "./../ConstraintParser/ConstraintParameter.cuh"
	#include "./../model/CoodinateDouble.cuh"
	#include "./../model/IntervalDouble.cuh"
	#include "./../model/PriorityDouble.cuh"
	#include "./../model/FullCoveredInfo.cuh"
	#include "./../model/PredictValue.cuh"
#include "./../model/PredictValueWithOne.cuh"
	#include "./../solver/ATG.h"
	#include "./../solver/PCATG.h"
	#include "./../solver/ConstantValue.h"
	#include "ExcuteConstraint.cuh"
	#include "HardwareStrategy.cuh"

	#include "cuda_runtime.h"
	#include "device_launch_parameters.h"
	#include "device_functions.hpp"
	#include "math_functions.h"

	#include <stdio.h>

	using namespace std;

	/*
	 * 这个文件是函数获取运行时刻的各种函数的声明
	 * */ 

	/*
	 * 注意这里计算有两部的计算优化：
	 * 1）在计算运行时刻值的时候，顺便把子约束满足情况计算了
	 * 2）计算子约束的满足情况的时候没有使用if等判断分支结构，
	 *    同时使用到已经计算好的运行时刻值去减少复杂的浮点数计算过程
	 * 这里采用的编码函数命名编码规则是这样的:
	 * getRuntimeValue_i_j表示计算第i个析取范式的第j个约束的运行时刻值
	 * */ 
	/*
	 * 第0个约束的CUDA计算函数
	 * */ 
	__device__ void getRuntimeValue_0_0(double x , double y , double z , double w , double t , double v , CoodinateDouble* res )
	{
		res->y = ( x-y+tan(v) ) - ( (z+t)/(w+t) );
		res->isCovered = (bool)(res->y >0);
		res->isValid = (bool)(isfinite(res->y));
		return ;
	}

	/*
	 * 第1个约束的CUDA计算函数
	 * */ 
	__device__ void getRuntimeValue_0_1(double x , double y , double z , double w , double t , double v , CoodinateDouble* res )
	{
		res->y = ( sqrt(x-t) ) - ( z/y );
		res->isCovered = (bool)(res->y >0);
		res->isValid = (bool)(isfinite(res->y));
		return ;
	}

	/*
	 * 第2个约束的CUDA计算函数
	 * */ 
	__device__ void getRuntimeValue_0_2(double x , double y , double z , double w , double t , double v , CoodinateDouble* res )
	{
		res->y = ( log(x*y) ) - ( log(t+w+z) );
		res->isCovered = (bool)(res->y >0);
		res->isValid = (bool)(isfinite(res->y));
		return ;
	}

	/*
	 * 第3个约束的CUDA计算函数
	 * */ 
	__device__ void getRuntimeValue_0_3(double x , double y , double z , double w , double t , double v , CoodinateDouble* res )
	{
		res->y = ( pow(y,t)*cos(v) ) - ( z*2+w*3+x*7 );
		res->isCovered = (bool)(res->y >0);
		res->isValid = (bool)(isfinite(res->y));
		return ;
	}

	/*
	 * 第4个约束的CUDA计算函数
	 * */ 
	__device__ void getRuntimeValue_0_4(double x , double y , double z , double w , double t , double v , CoodinateDouble* res )
	{
		res->y = ( z+w ) - ( x+y );
		res->isCovered = (bool)(res->y >0);
		res->isValid = (bool)(isfinite(res->y));
		return ;
	}

	/*
	 * 第5个约束的CUDA计算函数
	 * */ 
	__device__ void getRuntimeValue_0_5(double x , double y , double z , double w , double t , double v , CoodinateDouble* res )
	{
		res->y = ( x/y ) - ( w );
		res->isCovered = (bool)(res->y >0);
		res->isValid = (bool)(isfinite(res->y));
		return ;
	}

	/*
	 * 第6个约束的CUDA计算函数
	 * */ 
	__device__ void getRuntimeValue_0_6(double x , double y , double z , double w , double t , double v , CoodinateDouble* res )
	{
		res->y = ( x ) - ( (w+y-z) );
		res->isCovered = (bool)(res->y >0);
		res->isValid = (bool)(isfinite(res->y));
		return ;
	}

	/*
	 * 第7个约束的CUDA计算函数
	 * */ 
	__device__ void getRuntimeValue_0_7(double x , double y , double z , double w , double t , double v , CoodinateDouble* res )
	{
		res->y = ( sqrt(w*y*z) ) - ( log10(t*x) );
		res->isCovered = (bool)(res->y >0);
		res->isValid = (bool)(isfinite(res->y));
		return ;
	}

	/*
	 * 第8个约束的CUDA计算函数
	 * */ 
	__device__ void getRuntimeValue_0_8(double x , double y , double z , double w , double t , double v , CoodinateDouble* res )
	{
		res->y = ( x*cos(t+y) ) - ( log(w*z*3) );
		res->isCovered = (bool)(res->y >0);
		res->isValid = (bool)(isfinite(res->y));
		return ;
	}

	/*
	 * 第9个约束的CUDA计算函数
	 * */ 
	__device__ void getRuntimeValue_0_9(double x , double y , double z , double w , double t , double v , CoodinateDouble* res )
	{
		res->y = ( cos(t)*sin(v) ) - ( cos(y) );
		res->isCovered = (bool)(res->y >0);
		res->isValid = (bool)(isfinite(res->y));
		return ;
	}


	/*
	 * 下面是所有的  约束  在  各个搜索方向  的获取运行时刻值的关系（假如n个约束m个搜索方向，那么一共 m*n 个函数）
	 * */ 

	/*
	 * 第0个约束在第0个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_0_0(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_0(dev_predictArray[i+base].x , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第0个约束在第1个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_0_1(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_0(dev_parameter[0] , dev_predictArray[i+base].x , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第0个约束在第2个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_0_2(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_0(dev_parameter[0] , dev_parameter[1] , dev_predictArray[i+base].x , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第0个约束在第3个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_0_3(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_0(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_predictArray[i+base].x , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第0个约束在第4个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_0_4(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_0(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_predictArray[i+base].x , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第0个约束在第5个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_0_5(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_0(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_predictArray[i+base].x , dev_predictArray + i + base);
		}
	}



	/*
	 * 第1个约束在第0个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_1_0(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_1(dev_predictArray[i+base].x , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第1个约束在第1个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_1_1(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_1(dev_parameter[0] , dev_predictArray[i+base].x , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第1个约束在第2个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_1_2(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_1(dev_parameter[0] , dev_parameter[1] , dev_predictArray[i+base].x , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第1个约束在第3个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_1_3(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_1(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_predictArray[i+base].x , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第1个约束在第4个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_1_4(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_1(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_predictArray[i+base].x , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第1个约束在第5个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_1_5(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_1(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_predictArray[i+base].x , dev_predictArray + i + base);
		}
	}



	/*
	 * 第2个约束在第0个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_2_0(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_2(dev_predictArray[i+base].x , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第2个约束在第1个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_2_1(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_2(dev_parameter[0] , dev_predictArray[i+base].x , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第2个约束在第2个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_2_2(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_2(dev_parameter[0] , dev_parameter[1] , dev_predictArray[i+base].x , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第2个约束在第3个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_2_3(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_2(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_predictArray[i+base].x , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第2个约束在第4个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_2_4(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_2(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_predictArray[i+base].x , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第2个约束在第5个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_2_5(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_2(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_predictArray[i+base].x , dev_predictArray + i + base);
		}
	}



	/*
	 * 第3个约束在第0个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_3_0(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_3(dev_predictArray[i+base].x , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第3个约束在第1个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_3_1(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_3(dev_parameter[0] , dev_predictArray[i+base].x , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第3个约束在第2个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_3_2(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_3(dev_parameter[0] , dev_parameter[1] , dev_predictArray[i+base].x , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第3个约束在第3个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_3_3(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_3(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_predictArray[i+base].x , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第3个约束在第4个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_3_4(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_3(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_predictArray[i+base].x , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第3个约束在第5个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_3_5(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_3(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_predictArray[i+base].x , dev_predictArray + i + base);
		}
	}



	/*
	 * 第4个约束在第0个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_4_0(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_4(dev_predictArray[i+base].x , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第4个约束在第1个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_4_1(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_4(dev_parameter[0] , dev_predictArray[i+base].x , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第4个约束在第2个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_4_2(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_4(dev_parameter[0] , dev_parameter[1] , dev_predictArray[i+base].x , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第4个约束在第3个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_4_3(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_4(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_predictArray[i+base].x , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第4个约束在第4个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_4_4(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_4(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_predictArray[i+base].x , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第4个约束在第5个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_4_5(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_4(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_predictArray[i+base].x , dev_predictArray + i + base);
		}
	}



	/*
	 * 第5个约束在第0个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_5_0(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_5(dev_predictArray[i+base].x , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第5个约束在第1个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_5_1(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_5(dev_parameter[0] , dev_predictArray[i+base].x , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第5个约束在第2个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_5_2(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_5(dev_parameter[0] , dev_parameter[1] , dev_predictArray[i+base].x , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第5个约束在第3个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_5_3(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_5(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_predictArray[i+base].x , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第5个约束在第4个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_5_4(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_5(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_predictArray[i+base].x , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第5个约束在第5个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_5_5(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_5(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_predictArray[i+base].x , dev_predictArray + i + base);
		}
	}



	/*
	 * 第6个约束在第0个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_6_0(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_6(dev_predictArray[i+base].x , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第6个约束在第1个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_6_1(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_6(dev_parameter[0] , dev_predictArray[i+base].x , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第6个约束在第2个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_6_2(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_6(dev_parameter[0] , dev_parameter[1] , dev_predictArray[i+base].x , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第6个约束在第3个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_6_3(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_6(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_predictArray[i+base].x , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第6个约束在第4个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_6_4(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_6(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_predictArray[i+base].x , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第6个约束在第5个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_6_5(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_6(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_predictArray[i+base].x , dev_predictArray + i + base);
		}
	}



	/*
	 * 第7个约束在第0个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_7_0(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_7(dev_predictArray[i+base].x , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第7个约束在第1个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_7_1(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_7(dev_parameter[0] , dev_predictArray[i+base].x , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第7个约束在第2个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_7_2(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_7(dev_parameter[0] , dev_parameter[1] , dev_predictArray[i+base].x , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第7个约束在第3个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_7_3(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_7(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_predictArray[i+base].x , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第7个约束在第4个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_7_4(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_7(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_predictArray[i+base].x , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第7个约束在第5个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_7_5(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_7(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_predictArray[i+base].x , dev_predictArray + i + base);
		}
	}



	/*
	 * 第8个约束在第0个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_8_0(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_8(dev_predictArray[i+base].x , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第8个约束在第1个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_8_1(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_8(dev_parameter[0] , dev_predictArray[i+base].x , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第8个约束在第2个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_8_2(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_8(dev_parameter[0] , dev_parameter[1] , dev_predictArray[i+base].x , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第8个约束在第3个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_8_3(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_8(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_predictArray[i+base].x , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第8个约束在第4个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_8_4(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_8(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_predictArray[i+base].x , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第8个约束在第5个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_8_5(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_8(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_predictArray[i+base].x , dev_predictArray + i + base);
		}
	}



	/*
	 * 第9个约束在第0个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_9_0(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_9(dev_predictArray[i+base].x , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第9个约束在第1个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_9_1(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_9(dev_parameter[0] , dev_predictArray[i+base].x , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第9个约束在第2个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_9_2(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_9(dev_parameter[0] , dev_parameter[1] , dev_predictArray[i+base].x , dev_parameter[3] , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第9个约束在第3个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_9_3(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_9(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_predictArray[i+base].x , dev_parameter[4] , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第9个约束在第4个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_9_4(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_9(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_predictArray[i+base].x , dev_parameter[5] , dev_predictArray + i + base);
		}
	}

	/*
	 * 第9个约束在第5个搜索方向的执行
	 * */ 
	__global__ void calaConstraint_0_9_5(CoodinateDouble* dev_predictArray,double* dev_parameter,const int base,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			getRuntimeValue_0_9(dev_parameter[0] , dev_parameter[1] , dev_parameter[2] , dev_parameter[3] , dev_parameter[4] , dev_predictArray[i+base].x , dev_predictArray + i + base);
		}
	}



	/*
	 * 复合约束的并行计算模块,注意，这个函数还可以使用CUDA提供的流加速计算
	 * */ 
	void calaRuntimeValue(int paraIndex,CoodinateDouble* dev_predictArray,double* dev_parameter,const int row,const int col)
	{
		Block res = HardwareStrategy::getHardwareStrategy(col);
		//根据不同的搜索方向做判断
		if(paraIndex == 0)
		{
			calaConstraint_0_0_0<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,0*col,col);
			calaConstraint_0_1_0<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,1*col,col);
			calaConstraint_0_2_0<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,2*col,col);
			calaConstraint_0_3_0<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,3*col,col);
			calaConstraint_0_4_0<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,4*col,col);
			calaConstraint_0_5_0<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,5*col,col);
			calaConstraint_0_6_0<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,6*col,col);
			calaConstraint_0_7_0<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,7*col,col);
			calaConstraint_0_8_0<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,8*col,col);
			calaConstraint_0_9_0<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,9*col,col);
		}
		else if(paraIndex == 1)
		{
			calaConstraint_0_0_1<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,0*col,col);
			calaConstraint_0_1_1<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,1*col,col);
			calaConstraint_0_2_1<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,2*col,col);
			calaConstraint_0_3_1<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,3*col,col);
			calaConstraint_0_4_1<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,4*col,col);
			calaConstraint_0_5_1<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,5*col,col);
			calaConstraint_0_6_1<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,6*col,col);
			calaConstraint_0_7_1<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,7*col,col);
			calaConstraint_0_8_1<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,8*col,col);
			calaConstraint_0_9_1<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,9*col,col);
		}
		else if(paraIndex == 2)
		{
			calaConstraint_0_0_2<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,0*col,col);
			calaConstraint_0_1_2<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,1*col,col);
			calaConstraint_0_2_2<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,2*col,col);
			calaConstraint_0_3_2<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,3*col,col);
			calaConstraint_0_4_2<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,4*col,col);
			calaConstraint_0_5_2<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,5*col,col);
			calaConstraint_0_6_2<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,6*col,col);
			calaConstraint_0_7_2<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,7*col,col);
			calaConstraint_0_8_2<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,8*col,col);
			calaConstraint_0_9_2<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,9*col,col);
		}
		else if(paraIndex == 3)
		{
			calaConstraint_0_0_3<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,0*col,col);
			calaConstraint_0_1_3<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,1*col,col);
			calaConstraint_0_2_3<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,2*col,col);
			calaConstraint_0_3_3<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,3*col,col);
			calaConstraint_0_4_3<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,4*col,col);
			calaConstraint_0_5_3<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,5*col,col);
			calaConstraint_0_6_3<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,6*col,col);
			calaConstraint_0_7_3<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,7*col,col);
			calaConstraint_0_8_3<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,8*col,col);
			calaConstraint_0_9_3<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,9*col,col);
		}
		else if(paraIndex == 4)
		{
			calaConstraint_0_0_4<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,0*col,col);
			calaConstraint_0_1_4<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,1*col,col);
			calaConstraint_0_2_4<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,2*col,col);
			calaConstraint_0_3_4<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,3*col,col);
			calaConstraint_0_4_4<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,4*col,col);
			calaConstraint_0_5_4<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,5*col,col);
			calaConstraint_0_6_4<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,6*col,col);
			calaConstraint_0_7_4<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,7*col,col);
			calaConstraint_0_8_4<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,8*col,col);
			calaConstraint_0_9_4<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,9*col,col);
		}
		else if(paraIndex == 5)
		{
			calaConstraint_0_0_5<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,0*col,col);
			calaConstraint_0_1_5<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,1*col,col);
			calaConstraint_0_2_5<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,2*col,col);
			calaConstraint_0_3_5<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,3*col,col);
			calaConstraint_0_4_5<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,4*col,col);
			calaConstraint_0_5_5<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,5*col,col);
			calaConstraint_0_6_5<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,6*col,col);
			calaConstraint_0_7_5<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,7*col,col);
			calaConstraint_0_8_5<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,8*col,col);
			calaConstraint_0_9_5<<<res.NumOfBlock , res.ThreadPreBlock>>>(dev_predictArray,dev_parameter,9*col,col);
		}
		else
		{
			cout<<"************   You Should Never Get Here. In Function Of: void calaRuntimeValue(int paraIndex,CoodinateDouble* dev_predictArray,double* dev_parameter,const int row,const int col)"<<endl;
		}
	}


	/*
	 *  这个核函数是为了寻找可行解
	 * */ 
	__global__ void calaFeasibleSolution(FullCoveredInfo* dev_coveredInfo,CoodinateDouble* dev_predictArray,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if (i < Size)
		{
			dev_coveredInfo[i].index = i;
			dev_coveredInfo[i].isCovered = dev_predictArray[i + 0*Size].isCovered && dev_predictArray[i + 1*Size].isCovered && dev_predictArray[i + 2*Size].isCovered && dev_predictArray[i + 3*Size].isCovered && dev_predictArray[i + 4*Size].isCovered && dev_predictArray[i + 5*Size].isCovered && dev_predictArray[i + 6*Size].isCovered && dev_predictArray[i + 7*Size].isCovered && dev_predictArray[i + 8*Size].isCovered && dev_predictArray[i + 9*Size].isCovered;
			dev_coveredInfo[i].isVaild =  dev_predictArray[i + 0*Size].isValid && dev_predictArray[i + 1*Size].isValid && dev_predictArray[i + 2*Size].isValid && dev_predictArray[i + 3*Size].isValid && dev_predictArray[i + 4*Size].isValid && dev_predictArray[i + 5*Size].isValid && dev_predictArray[i + 6*Size].isValid && dev_predictArray[i + 7*Size].isValid && dev_predictArray[i + 8*Size].isValid && dev_predictArray[i + 9*Size].isValid;
			dev_coveredInfo[i].vaildNum = (int)(dev_coveredInfo[i].isVaild);
		}
	}

	/*
	 * 判断是否有满足复合约束的可行解,CPU验证模块
	 * */ 
	bool checkisFullCovered(FullCoveredInfo* dev_coveredInfo,CoodinateDouble* initArray, bool &findSolution,const int row,const int col)
	{
		FullCoveredInfo* coveredInfo = new FullCoveredInfo[col];
		cudaMemcpy(coveredInfo,dev_coveredInfo,col * sizeof(FullCoveredInfo),cudaMemcpyDeviceToHost);
		for(int i=0;i<col;i++)
		{
			double x = 0 , y = 0 , z = 0 , w = 0 , t = 0 , v = 0;
			if(ATG::currentSearchParamIndex == 0)
			{
				x = initArray[i].x;
				x = ATG::parameters[1];
				x = ATG::parameters[2];
				x = ATG::parameters[3];
				x = ATG::parameters[4];
				x = ATG::parameters[5];
			}
			else if(ATG::currentSearchParamIndex == 1)
			{
				y = ATG::parameters[0];
				y = initArray[i].x;
				y = ATG::parameters[2];
				y = ATG::parameters[3];
				y = ATG::parameters[4];
				y = ATG::parameters[5];
			}
			else if(ATG::currentSearchParamIndex == 2)
			{
				z = ATG::parameters[0];
				z = ATG::parameters[1];
				z = initArray[i].x;
				z = ATG::parameters[3];
				z = ATG::parameters[4];
				z = ATG::parameters[5];
			}
			else if(ATG::currentSearchParamIndex == 3)
			{
				w = ATG::parameters[0];
				w = ATG::parameters[1];
				w = ATG::parameters[2];
				w = initArray[i].x;
				w = ATG::parameters[4];
				w = ATG::parameters[5];
			}
			else if(ATG::currentSearchParamIndex == 4)
			{
				t = ATG::parameters[0];
				t = ATG::parameters[1];
				t = ATG::parameters[2];
				t = ATG::parameters[3];
				t = initArray[i].x;
				t = ATG::parameters[5];
			}
			else if(ATG::currentSearchParamIndex == 5)
			{
				v = ATG::parameters[0];
				v = ATG::parameters[1];
				v = ATG::parameters[2];
				v = ATG::parameters[3];
				v = ATG::parameters[4];
				v = initArray[i].x;
			}
			else
				cout<<"FFFUCK  YOU   *************   "<<endl;

			bool tmpp = (((((((((x-y+tan(v)>(z+t)/(w+t))&&(sqrt(x-t)>z/y))&&(log(x*y)>log(t+w+z)))&&(pow(y,t)*cos(v)>z*2+w*3+x*7))&&(z+w>x+y))&&(x/y>w))&&(x>(w+y-z)))&&(sqrt(w*y*z)>log10(t*x)))&&(x*cos(t+y)>log(w*z*3)))&&(cos(t)*sin(v)>cos(y));
			if(coveredInfo[i].isCovered == tmpp )
			{
				if(tmpp)
					findSolution = true;
			}else
			{
				cout<<"*************  Not Equal  ******************"<<endl;
				return false;
			}
		}
		delete []coveredInfo;
		return true;
	}

	/*
	 * 就是区间交运算的计算
	 * */ 
	__global__ void calaFinalIntervel(IntervalDouble* dev_finalIntervel,IntervalDouble* dev_interval,const int calaArraySize)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		bool condition = (i>=1) && (i<calaArraySize);
		if(condition)
		{
			IntervalDouble* a0 = dev_interval + i + calaArraySize * 0;
			IntervalDouble* a1 = dev_interval + i + calaArraySize * 1;
			IntervalDouble* a2 = dev_interval + i + calaArraySize * 2;
			IntervalDouble* a3 = dev_interval + i + calaArraySize * 3;
			IntervalDouble* a4 = dev_interval + i + calaArraySize * 4;
			IntervalDouble* a5 = dev_interval + i + calaArraySize * 5;
			IntervalDouble* a6 = dev_interval + i + calaArraySize * 6;
			IntervalDouble* a7 = dev_interval + i + calaArraySize * 7;
			IntervalDouble* a8 = dev_interval + i + calaArraySize * 8;
			IntervalDouble* a9 = dev_interval + i + calaArraySize * 9;

			double left = a0->left;
			left = max( left , a1->left);
			left = max( left , a2->left);
			left = max( left , a3->left);
			left = max( left , a4->left);
			left = max( left , a5->left);
			left = max( left , a6->left);
			left = max( left , a7->left);
			left = max( left , a8->left);
			left = max( left , a9->left);

			double right = a0->right;
			right = min( right , a1->right);
			right = min( right , a2->right);
			right = min( right , a3->right);
			right = min( right , a4->right);
			right = min( right , a5->right);
			right = min( right , a6->right);
			right = min( right , a7->right);
			right = min( right , a8->right);
			right = min( right , a9->right);

			bool hasIntervel = a0->hasIntervel && a1->hasIntervel && a2->hasIntervel && a3->hasIntervel && a4->hasIntervel && a5->hasIntervel && a6->hasIntervel && a7->hasIntervel && a8->hasIntervel && a9->hasIntervel;
			dev_finalIntervel[i].left = left;
			dev_finalIntervel[i].right = right;
			dev_finalIntervel[i].hasIntervel = hasIntervel;
			//这里可以自行添加打印获取区间交运算的结果
			//printf("(%f , %f ) (%f , %f ) (%f , %f ) Final %d (%f , %f)\n",a1->left,a1->right,a2->left,a2->right,a3->left,a3->right,hasIntervel,left,right);
		}
	}

	/*
	 * 根据预测的序列生成predct矩阵
	 * */ 
	__global__ void generatePredictMat(CoodinateDouble* dev_predictArray,PredictValueWithOne* dev_finalAllPredictValue,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if( i < Size )
		{
			dev_predictArray[i + 0*Size].x = dev_finalAllPredictValue[i].value;
			dev_predictArray[i + 1*Size].x = dev_finalAllPredictValue[i].value;
			dev_predictArray[i + 2*Size].x = dev_finalAllPredictValue[i].value;
			dev_predictArray[i + 3*Size].x = dev_finalAllPredictValue[i].value;
			dev_predictArray[i + 4*Size].x = dev_finalAllPredictValue[i].value;
			dev_predictArray[i + 5*Size].x = dev_finalAllPredictValue[i].value;
			dev_predictArray[i + 6*Size].x = dev_finalAllPredictValue[i].value;
			dev_predictArray[i + 7*Size].x = dev_finalAllPredictValue[i].value;
			dev_predictArray[i + 8*Size].x = dev_finalAllPredictValue[i].value;
			dev_predictArray[i + 9*Size].x = dev_finalAllPredictValue[i].value;
		}
	}

	/*
	 * 并行计算所有的预测解向量的优先级
	 * */ 
	__global__ void calaPriority(PriorityDouble* dev_priority,CoodinateDouble* dev_calaArray,const int row,const int Size)
	{
		int i = threadIdx.x + blockIdx.x*blockDim.x;
		if( i < Size )
		{
			double pri = 0.0;
			CoodinateDouble* a0 = dev_calaArray + i + 0 * Size;
			CoodinateDouble* a1 = dev_calaArray + i + 1 * Size;
			CoodinateDouble* a2 = dev_calaArray + i + 2 * Size;
			CoodinateDouble* a3 = dev_calaArray + i + 3 * Size;
			CoodinateDouble* a4 = dev_calaArray + i + 4 * Size;
			CoodinateDouble* a5 = dev_calaArray + i + 5 * Size;
			CoodinateDouble* a6 = dev_calaArray + i + 6 * Size;
			CoodinateDouble* a7 = dev_calaArray + i + 7 * Size;
			CoodinateDouble* a8 = dev_calaArray + i + 8 * Size;
			CoodinateDouble* a9 = dev_calaArray + i + 9 * Size;
			pri = pri + ((int)(a0->isCovered==true))*1 + ((int)(a0->isCovered==false))*((int)(a0->isValid==true))*1.0/(1.0+abs(a0->y));
			pri = pri + ((int)(a1->isCovered==true))*1 + ((int)(a1->isCovered==false))*((int)(a1->isValid==true))*1.0/(1.0+abs(a1->y));
			pri = pri + ((int)(a2->isCovered==true))*1 + ((int)(a2->isCovered==false))*((int)(a2->isValid==true))*1.0/(1.0+abs(a2->y));
			pri = pri + ((int)(a3->isCovered==true))*1 + ((int)(a3->isCovered==false))*((int)(a3->isValid==true))*1.0/(1.0+abs(a3->y));
			pri = pri + ((int)(a4->isCovered==true))*1 + ((int)(a4->isCovered==false))*((int)(a4->isValid==true))*1.0/(1.0+abs(a4->y));
			pri = pri + ((int)(a5->isCovered==true))*1 + ((int)(a5->isCovered==false))*((int)(a5->isValid==true))*1.0/(1.0+abs(a5->y));
			pri = pri + ((int)(a6->isCovered==true))*1 + ((int)(a6->isCovered==false))*((int)(a6->isValid==true))*1.0/(1.0+abs(a6->y));
			pri = pri + ((int)(a7->isCovered==true))*1 + ((int)(a7->isCovered==false))*((int)(a7->isValid==true))*1.0/(1.0+abs(a7->y));
			pri = pri + ((int)(a8->isCovered==true))*1 + ((int)(a8->isCovered==false))*((int)(a8->isValid==true))*1.0/(1.0+abs(a8->y));
			pri = pri + ((int)(a9->isCovered==true))*1 + ((int)(a9->isCovered==false))*((int)(a9->isValid==true))*1.0/(1.0+abs(a9->y));
			dev_priority[i].priority =  pri / (double)row;
			dev_priority[i].x = a1->x;

			//下面是测试代码
			bool isOne = (a0->x == a1->x) && (a1->x == a2->x) && (a2->x == a3->x) && (a3->x == a4->x) && (a4->x == a5->x) && (a5->x == a6->x) && (a6->x == a7->x) && (a7->x == a8->x) && (a8->x == a9->x);
			bool isCovered = a0->isCovered && a1->isCovered && a2->isCovered && a3->isCovered && a4->isCovered && a5->isCovered && a6->isCovered && a7->isCovered && a8->isCovered && a9->isCovered;
			bool isValid= a0->isValid && a1->isValid && a2->isValid && a3->isValid && a4->isValid && a5->isValid && a6->isValid && a7->isValid && a8->isValid && a9->isValid;
			if(isCovered == true)
			{
				printf("Cala Prioruty Wrong,index:%d: (%f,%f,%d,%d) , (%f,%f,%d,%d) , (%f,%f,%d,%d) , (%f,%f,%d,%d) , (%f,%f,%d,%d) , (%f,%f,%d,%d) , (%f,%f,%d,%d) , (%f,%f,%d,%d) , (%f,%f,%d,%d) , (%f,%f,%d,%d) , isOne:%d , isCovered:%d , isValid:%d  \n",i,a0->x,a0->y,a0->isCovered,a0->isValid,a1->x,a1->y,a1->isCovered,a1->isValid,a2->x,a2->y,a2->isCovered,a2->isValid,a3->x,a3->y,a3->isCovered,a3->isValid,a4->x,a4->y,a4->isCovered,a4->isValid,a5->x,a5->y,a5->isCovered,a5->isValid,a6->x,a6->y,a6->isCovered,a6->isValid,a7->x,a7->y,a7->isCovered,a7->isValid,a8->x,a8->y,a8->isCovered,a8->isValid,a9->x,a9->y,a9->isCovered,a9->isValid,isOne,isCovered,isValid);
			}
		}
	}


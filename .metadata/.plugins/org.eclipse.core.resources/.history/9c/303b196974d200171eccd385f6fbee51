		/*
		 * SolverParameter.cpp
		 *
		 *  Created on: Oct 21, 2017
		 *      Author: zy
		 */
		#include "SolverParameter.h"
		#include <cmath>

		/*
		 *  使用这样的结构来获取各个类型的最大值和最小值
			cout<<(numeric_limits<int>::max)() <<endl;
			cout<<(numeric_limits<int>::min)() <<endl;
			cout<<(numeric_limits<double>::max)() <<endl;
			cout<<(numeric_limits<double>::min)() <<endl;
		 * */

		/*
		 * 静态变量必须类外初始化
		 * */
		double* SolverParameter::finalParams = NULL;
		double SolverParameter::finalCovered = 0;
		int SolverParameter::MAX_NUM_OF_PREDICT_PARAM = 10;
		int SolverParameter::MAX_NUM_OF_GENERATE_CYCLE = 5;
		double SolverParameter::function_time = 0;
		int SolverParameter::function_frequency = 0;
		int SolverParameter::SEARCH_STRATEGY = 0;
		int SolverParameter::Cala_Strategy = 0;
		double SolverParameter::START_POINT = 0;
		double SolverParameter::MAX_STEP = 5;

		//注意这个参数的初始化有点特殊，这里使用到了函数指针
		double SolverParameter::ZeroToleranceDegree = (numeric_limits<double>::min)() ;


		double SolverParameter::totalTime[countOfRepeation] = {0.0};
		int SolverParameter::totalFrequency[countOfRepeation] = {0};
		double SolverParameter::algorithmTime[countOfRepeation] = {0.0};
		int SolverParameter::coveredRatio[countOfRepeation] = {0};
		bool SolverParameter::findResult[countOfRepeation] = {0};

		bool SolverParameter::IS_CUSTOMIZED = true;
		double SolverParameter::CUSTOMIZED_PARAMS[ConstraintParameter::NUM_OF_PARAM] = {0, -1, -119802.1652766506, -115.51907472491851, 6437.879463475297, 48009.06078165536, -81449.74577192578, -0.8253521111237712, -67702.42449687533, -114.20822156416392, -554.942159360406, -77.38663746873401, 3133.351349199255, -5.081710337489551E7, -133.82405601537394, -359.42283476302373, -183.50581554544223, 168.27991698789444, 30.040156763662893, 111.40693545895304, -51.9237346140251, -1.5358036639387032, 4.744095011378936, -26.710042282267736};
